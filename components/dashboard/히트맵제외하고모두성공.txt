'use client';

import { useEffect, useMemo, useState } from 'react';
import dayjs from 'dayjs';
import { Card, CardContent } from '@/components/ui/card';
import * as SB from '@/lib/supabaseClient';

// 📊 대시보드 카드 import
import WeeklySummaryCard from '@/components/dashboard/WeeklySummaryCard';
import AccumulatedFocusCard from '@/components/dashboard/AccumulatedFocusCard';
import FocusGaugeCard from '@/components/dashboard/FocusGaugeCard';
import MonthlyTotalCard from '@/components/dashboard/MonthlyTotalCard';
import PlanActualCard from '@/components/dashboard/PlanActualCard';
import SubjectFocusCard from '@/components/dashboard/SubjectFocusCard';
import TimeOfDayFocusCard from '@/components/dashboard/TimeOfDayFocusCard';
import TodayEfficiencyCard from '@/components/dashboard/TodayEfficiencyCard';
import WeeklyChangeCard from '@/components/dashboard/WeeklyChangeCard';

const pickSupabase = () =>
  typeof (SB as any).getSupabaseBrowser === 'function'
    ? (SB as any).getSupabaseBrowser()
    : (SB as any).getSupabaseClient();

export default function ViewerDashboard({ viewerId }: { viewerId: string }) {
  const supabase = useMemo(() => pickSupabase(), []);
  const [aiSummary, setAiSummary] = useState<string | null>(null);
  const [planMin, setPlanMin] = useState(0);
  const [actualMin, setActualMin] = useState(0);
  const [memo, setMemo] = useState('');
  const [todayComments, setTodayComments] = useState<any[]>([]);

  // ======================
  // 🔹 1️⃣ AI 요약 로드
  // ======================
  useEffect(() => {
    if (viewerId) loadAISummary();
  }, [viewerId]);

  const loadAISummary = async () => {
    const { data } = await supabase
      .from('dashboard_ai')
      .select('summary')
      .eq('user_id', viewerId)
      .order('created_at', { ascending: false })
      .limit(1)
      .maybeSingle();

    if (data?.summary) setAiSummary(data.summary);
    else loadManualSummary(); // 데이터 없을 때 기본 생성
  };

  const loadManualSummary = async () => {
    const start = dayjs().startOf('week').add(1, 'day');
    const end = start.add(6, 'day');

    const [plansRes, sessRes] = await Promise.all([
      supabase
        .from('plans')
        .select('start_at,end_at')
        .eq('user_id', viewerId)
        .gte('start_at', start.toISOString())
        .lte('end_at', end.toISOString()),
      supabase
        .from('sessions')
        .select('actual_start,actual_end,duration_min')
        .eq('user_id', viewerId)
        .gte('actual_start', start.toISOString())
        .lte('actual_end', end.toISOString()),
    ]);

    const plans = plansRes.data || [];
    const sessions = sessRes.data || [];

    const plan = plans.reduce(
      (s, p) => s + dayjs(p.end_at).diff(dayjs(p.start_at), 'minute'),
      0
    );
    const act = sessions.reduce((s, p) => s + (p.duration_min ?? 0), 0);

    setPlanMin(plan);
    setActualMin(act);
  };

  // ======================
  // 🔹 2️⃣ 오늘의 메모 관리
  // ======================
  useEffect(() => {
    if (viewerId) loadTodayMemos();
  }, [viewerId]);

  const loadTodayMemos = async () => {
    const today = dayjs().format('YYYY-MM-DD');
    const { data } = await supabase
      .from('dashboard_comments')
      .select('*')
      .eq('user_id', viewerId)
      .gte('created_at', `${today}T00:00:00`)
      .lte('created_at', `${today}T23:59:59`)
      .order('created_at', { ascending: true });
    setTodayComments(data || []);
  };

  const saveMemo = async () => {
    if (!memo.trim()) return;
    await supabase.from('dashboard_comments').insert({
      user_id: viewerId,
      content: memo,
      parent_id: null,
    });
    setMemo('');
    loadTodayMemos();
  };

  // ======================
  // 🔹 3️⃣ 실천율 계산
  // ======================
  const rate = planMin ? Math.round((actualMin / planMin) * 100) : 0;
  const rateMsg =
    rate === 0
      ? '저조한 편입니다. 좀 더 분발하여 주세요.'
      : rate < 40
      ? '저조한 편입니다. 좀 더 분발하여 주세요.'
      : rate < 80
      ? '양호한 편입니다. 그러나 아직 조금 부족합니다. 힘내세요. 화이팅!!'
      : '와우~~ 열심히 하고 있군요. 조금만 더 힘내서 목표를 달성하도록 해요!!';

  const planH = Math.floor(planMin / 60);
  const planM = planMin % 60;
  const actH = Math.floor(actualMin / 60);
  const actM = actualMin % 60;

  return (
    <div className="space-y-8">
      {/* 1️⃣ AI 요약 카드 */}
      <Card className="bg-gradient-to-r from-blue-50 to-teal-50 border border-blue-200">
        <CardContent className="p-5">
          <h2 className="text-lg font-semibold mb-2">🤖 AI 학습 요약</h2>
          {aiSummary ? (
            <p className="leading-relaxed whitespace-pre-wrap">{aiSummary}</p>
          ) : (
            <p className="text-gray-700">
              매주 일요일 AI 학습 요약이 생성됩니다. 아직 학습에 대한 요약이 생성되지
              않았습니다. <br />
              현재까지 계획 공부 시간은 {planH}시간 {planM}분이며 실제 공부 시간은{' '}
              {actH}시간 {actM}분입니다. <br />
              이에 따른 실천율은 {rate}%로 {rateMsg}
            </p>
          )}
        </CardContent>
      </Card>

      {/* 2️⃣ 오늘의 메모 */}
      <Card>
        <CardContent className="p-4">
          <h2 className="font-semibold mb-3">📝 오늘의 메모</h2>
          <textarea
            value={memo}
            onChange={(e) => setMemo(e.target.value)}
            placeholder="오늘 느낀 점이나 기록을 적어보세요..."
            className="w-full p-2 border rounded-md mb-3 h-24 focus:ring-2 focus:ring-blue-300"
          />
          <button
            onClick={saveMemo}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            저장
          </button>

          {todayComments.length > 0 && (
            <div className="mt-4 space-y-2">
              {todayComments.map((c) => (
                <div
                  key={c.id}
                  className="p-2 bg-gray-50 border rounded-md text-sm text-gray-700"
                >
                  <span className="font-medium mr-2">
                    {dayjs(c.created_at).format('HH:mm')}
                  </span>
                  {c.content}
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* 3️⃣ 히트맵 */}
      <Card>
        <CardContent className="p-4">
          <h2 className="font-semibold mb-3">🔥 학습 히트맵</h2>
          <p className="text-sm text-gray-500">
            (히트맵 클릭 시 일자별 세부 계획/세션을 표시하도록 구성 예정)
          </p>
          <div className="mt-4 h-32 bg-gray-100 flex items-center justify-center rounded-md text-gray-400">
            [히트맵 표시 영역]
          </div>
        </CardContent>
      </Card>

      {/* 4️⃣ 하단 - 통합 카드 */}
      <section className="bg-white rounded-lg border p-4 space-y-4">
        <h2 className="font-semibold mb-3">📚 학습 요약 대시보드</h2>
        <div className="grid grid-cols-1 xl:grid-cols-2 gap-4">
          <WeeklySummaryCard viewerId={viewerId} />
          <AccumulatedFocusCard viewerId={viewerId} />
          <FocusGaugeCard viewerId={viewerId} />
          <MonthlyTotalCard viewerId={viewerId} />
          <PlanActualCard viewerId={viewerId} />
          <SubjectFocusCard viewerId={viewerId} />
          <TimeOfDayFocusCard viewerId={viewerId} />
          <TodayEfficiencyCard viewerId={viewerId} />
          <WeeklyChangeCard viewerId={viewerId} />
        </div>
      </section>
    </div>
  );
}
